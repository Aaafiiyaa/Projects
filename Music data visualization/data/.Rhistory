predTree=as.data.frame(predict(model_1,check,type="response"))
pred=round(predTree)
pred=pred$`predict(model_1, check, type = "response")`
check=train[round(nrow(train)*0.7):nrow(train),]
library(gbm)
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
setwd("C:/Users/mukul.chaware13/Desktop/N/Competitions/EXL/Q3/")
train=read.csv("train1.csv")
test=read.csv("test1.csv")
check=train[round(nrow(train)*0.7):nrow(train),]
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
str(train)
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "adaboost",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
setwd("C:/Users/mukul.chaware13/Desktop/N/Competitions/EXL/Q3/")
train=read.csv("train1.csv")
test=read.csv("test1.csv")
patient=train$Patient_ID
train$Patient_ID=NULL
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "adaboost",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
setwd("C:/Users/mukul.chaware13/Desktop/N/Competitions/EXL/Q3/")
train=read.csv("train1.csv")
test=read.csv("test1.csv")
check=train[round(nrow(train)*0.7):nrow(train),]
library(gbm)
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
summary(train)
train[,3:ncol(train)]
colnames(train[,3:ncol(train)])
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
dim(train[,3:ncol(train)])
dim(train[,2)
dim(train[,2])
length4(train[,2])
length(train[,2])
?gbm
model=gbm(EXAC~.,train,distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,round(nrow(train)*0.7))
model_1=gbm.fit(x=train[,3:ncol(train)],y=train[,2],distribution = "bernoulli",n.trees = 2000,shrinkage = 0.005,interaction.depth = 10,verbose = T,bag.fraction = 0.5,nTrain = round(nrow(train)*0.7))
gbm.pref(model_1)
gbm.perf(model_1)
pred=round(predTree)
pred=pred$`predict(model_1, check, type = "response")`
table(check$EXAC,pred)
predTree=as.data.frame(predict(model_1,check,type="response"))
pred=round(predTree)
pred=pred$`predict(model_1, check, type = "response")`
table(check$EXAC,pred)
table(check$EXAC)
table(pred)
library(xgboost)
?xgboost
362/418
param <- list("objective" = "binary:logistic","eta"="0.005",
"max.depth"=5,"nthread"=2)
xgmodel=xgboost(param=param,data =train, nrounds=100)
xgmodel=xgboost(param=param,data =as.matrix(train),nrounds=100)
dtrain <- xgb.DMatrix(data = train, label = EXAC)
dtrain <- xgb.DMatrix(data = as.matrix(train), label = EXAC)
head(train)
patient=train$Patient_ID
train$Patient_ID=NULL
dtrain <- xgb.DMatrix(data = as.matrix(train), label = EXAC)
dtrain <- xgb.DMatrix(data = as.matrix(train), label = "EXAC")
dtrain <- xgb.DMatrix(data = as.matrix(train), label = train$EXAC)
dtrain
dtrain <- xgb.DMatrix(data = as.matrix(train[1:round(nrow(train)*0.7),]), label = train$EXAC)
dtrain <- xgb.DMatrix(data = as.matrix(train[1:round(nrow(train)*0.7),]), label = train$EXAC[1:round(nrow(train)*0.7)])
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=100)
param <- list("objective" = "binary:logistic","eta"="0.005",
"max.depth"=2,"nthread"=2)
dtrain <- xgb.DMatrix(data = as.matrix(train[1:round(nrow(train)*0.7),]), label = train$EXAC[1:round(nrow(train)*0.7)])
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=100)
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=100,verbose = 2)
pred=predict(xgmodel,check)
dcheck=xgb.DMatrix(data=as.matrix(check))
pred=predict(xgmodel,dcheck)
pred
pred=round(pred)
table(check$EXAC,pred)
pred
pred
table(check$EXAC,pred)
367/418
library(randomForest)
?randomForest
table(check$EXAC)
table(check$EXAC,pred)
param <- list("objective" = "binary:logistic","eta"="0.05",
"max.depth"=2,"nthread"=2)
dtrain <- xgb.DMatrix(data = as.matrix(train[1:round(nrow(train)*0.7),]), label = train$EXAC[1:round(nrow(train)*0.7)])
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=10,verbose = 2)
dcheck=xgb.DMatrix(data=as.matrix(check))
pred=predict(xgmodel,dcheck)
pred=round(pred)
table(check$EXAC,pred)
param <- list("objective" = "binary:logistic",
"max.depth"=1,"nthread"=2)
dtrain <- xgb.DMatrix(data = as.matrix(train[1:round(nrow(train)*0.7),]), label = train$EXAC[1:round(nrow(train)*0.7)])
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=2,verbose = 2)
dcheck=xgb.DMatrix(data=as.matrix(check))
pred=predict(xgmodel,dcheck)
pred=round(pred)
table(check$EXAC,pred)
table(check$EXAC)
367/418
xgmodel=xgboost(param=param,data =dtrain,label = ,nrounds=100,verbose = 2)
model_1=randomForest(EXAC~., data=train[1:round(nrow(train)*0.7),], ntree=500)
?randomForest
train$EXAC=as.factor(train$EXAC)
model_1=randomForest(EXAC~., data=train[1:round(nrow(train)*0.7),], ntree=500)
model-1
model_1
predict(model_1,check,type="response")
pred=predict(model_1,check,type="response")
table(check$EXAC,pred)
368/418
model_1=randomForest(EXAC~., data=train[1:round(nrow(train)*0.7),], ntree=1000)
pred=predict(model_1,check,type="response")
table(check$EXAC,pred)
370/418
model_1=randomForest(EXAC~., data=train[1:round(nrow(train)*0.7),], ntree=1500)
pred=predict(model_1,check,type="response")
table(check$EXAC,pred)
model_1=randomForest(EXAC~., data=train[1:round(nrow(train)*0.7),], ntree=2000)
pred=predict(model_1,check,type="response")
table(check$EXAC,pred)
table(pred)
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
library(REchoNest)
api_key="OHOMFXRMEYVS3MHKW"
data=search_artist(api_key,artist_start_year_after = 2000,artist_end_year_before = "2010")
data
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
data
data=as.data.frame(data)
data
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
?search_artist
list_genres()
list_genres(api_key)
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
d=list_genres(api_key)
d
list(d)
p=list(d)
str(p)
p=list(as.factor(d))
as.factor
(d)
d=as.factor
(d)
d
d=list_genres(api_key)
str(d)
d=list_genres(api_key)
str(list(d$name))
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
d
list(d=d)
p=list(d=d)
p$d$name
p$d
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
g
d
g=list_genres(api_key)
g=g$name
g
g=c("",g)
g[1]
g
getwd("")
getwd()
setwd("C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization/data/")
write(g,"genre.txt")
d=read.table("Music data visualization/data/genre.txt",header=F)
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
g=read.table("C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization/data/genre.txt",header=F)
g
g[1]
write.csv(g,"genre.csv")
g=read.csv("C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization/data/genre.csv",header=F)
g$V2
g$V1
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
g=read.csv("C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization/data/genre.csv",header=F)
g=g$V2
g
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
g=read.csv("C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization/data/genre.csv",stringsAsFactors = F)
g$x
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
?search_artist
ls("package:REchoNest")
?get_artist_data
get_artist_data(api_key,name="coldplay")
d=get_artist_data(api_key,name="coldplay")
d
d=get_artist_data(api_key,name="coldplay",artist_location = T)
d
d=get_artist_data(api_key,name="adele",artist_location = T)
d
library(leaflet)
m <- leaflet() %>% setView() %>% addTiles()
your.map <- leaflet() %>% addTiles()
your.map
your.map%>%addProviderTiles("Stamen.Toner")
your.map%>%addProviderTiles("CartoDB.Positron")
your.map
your.map%>%addProviderTiles("CartoDB.Positron")
your.map %>% addProviderTiles("MtbMap") %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)
) %>%
addProviderTiles("Stamen.TonerLabels")
your.map %>%
addProviderTiles("Stamen.TonerLines",
options = providerTileOptions(opacity = 0.35)
) %>%
addProviderTiles("Stamen.TonerLabels")
data=search_artist(api_key,genre)
data=search_artist(api_key,genre="pop")
data
for(i in nrow(data))
artist_data=get_artist_data(data$name[i],artist_location = T)
for(i in nrow(data))
artist_data=get_artist_data(api_key,data$name[i],artist_location = T)
artist_data
data
str(data)
for(i in 1:nrow(data))
artist_data=get_artist_data(api_key,data$name[i],artist_location = T)
artist_data
artist_data=NULL
if(!is.na(data))
{
for(i in 1:nrow(data))
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
}
artist_data
d=as.data.frame(artist_data)
d$artist_location
d$artist_location$location
d$artist_location
d$artist_location[["location"]]
d$artist_location["location"]
str(d$artist_location)
loc=d$artist_location
loc=unlist(loc)
loc
str(loc)
loc=as.data.frame(loc)
loc
str(loc)
d$artist_location
d$artist_location[[1]]$location
coord=geocode(artist_data$artist_location[[1]]$location)
library(ggmap)
coord=geocode(artist_data$artist_location[[1]]$location)
coord=geocode(as.character(artist_data$artist_location[[1]]$location))
coord=geocode(as.character(artist_data$artist_location[[1]]$location))
as.character(artist_data$artist_location[[1]]$location)
artist_data$artist_location[[1]]$location
artist_data
artist_data=as.data.frame(artist_data)
artist_data$artist_location[[1]]$location
coord=geocode(as.character(artist_data$artist_location[[1]]$location))
coord
as.character(artist_data$artist_location$location)
as.character(artist_data$artist_location[[1:3]]$location)
as.character(artist_data$artist_location[[3]]$location)
coords=NULL
if(!is.na(data[1]))
{
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
coords=rbind(coord,geocode(artist_data$artist_location[[i]]$location))
}
coords=as.data.frame(coords)
}
artist_data=NULL
coords=NULL
if(!is.na(data[1]))
{
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
coords=rbind(coords,geocode(artist_data$artist_location[[i]]$location))
}
coords=as.data.frame(coords)
}
artist_data=NULL
coords=NULL
if(!is.na(data[1]))
{
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
coords=as.data.frame(coords)
}
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
#coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
for(i in 1:nrow(data))
{
#  artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
as.character(artist_data$artist_location[[1]]$location)
artist_data=as.data.frame(artist_data)
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
for(i in 1:nrow(data))
{
#  artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
artist_data=as.data.frame(artist_data)
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
coords
coords=as.data.frame(coords)
coords=cbind(artist_data$name,coords,artist_data$hotttnesss)
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
artist_data=as.data.frame(artist_data)
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
coords=as.data.frame(coords)
coords=cbind(as.character(artist_data$name),coords,as.numeric(artist_data$hotttnesss))
artist_data=NULL
coords=NULL
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
artist_data=as.data.frame(artist_data)
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
artist_data
artist_data=NULL
coords=NULL
for(i in 1:nrow(data))
{
artist_data=rbind(artist_data,get_artist_data(api_key,data$name[i],artist_location = T))
}
artist_data=as.data.frame(artist_data)
for(i in 1:nrow(data))
{
coords=rbind(coords,geocode(as.character(artist_data$artist_location[[i]]$location)))
}
coords=as.data.frame(coords)
coords
co=cbind(as.character(artist_data$name),coords,as.numeric(artist_data$hotttnesss))
colnames(co)=c("name","lon","lat","hotttnesss")
leaflet(coords) %>% addTiles() %>% addProviderTiles("CartoDB.Positron")
addMarkers(~lon, ~lat, popup = paste("<b>Artist: </b>",name,"</br></b>Hotttnesss: </b>",hotttnesss,sep="")
)
coords=cbind(as.character(artist_data$name),coords,as.numeric(artist_data$hotttnesss))
colnames(coords)=c("name","lon","lat","hotttnesss")
leaflet(coords) %>% addTiles() %>% addProviderTiles("CartoDB.Positron")
addMarkers(~lon, ~lat, popup = paste("<b>Artist: </b>",name,"</br></b>Hotttnesss: </b>",hotttnesss,sep="")
)
coords
str(coords)
coords$name=as.character(coords$name)
str(coords)
leaflet(coords) %>% addTiles()%>%setView(mean(lon), mean(lat), zoom = 3)
%>% addProviderTiles("CartoDB.Positron")
addMarkers(~lon, ~lat, popup = paste("<b>Artist: </b>",name,"</br></b>Hotttnesss: </b>",hotttnesss,sep="")
)
leaflet(data=coords) %>% addTiles()%>%setView(mean(lon), mean(lat), zoom = 3)
%>% addProviderTiles("CartoDB.Positron")
addMarkers(~lon, ~lat, popup = paste("<b>Artist: </b>",name,"</br></b>Hotttnesss: </b>",hotttnesss,sep="")
)
coords$lon
leaflet(data=coords) %>% addTiles()%>%setView(mean(lon), mean(lat), zoom = 3)
%>% addProviderTiles("CartoDB.Positron") %>%
addMarkers(~lon, ~lat, popup = paste("<b>Artist: </b>",name,"</br></b>Hotttnesss: </b>",hotttnesss,sep="")
)
leaflet(data=coords) %>% addTiles()%>%setView(mean(coords$lon), mean(coords$lat), zoom = 3)
%>% addProviderTiles("CartoDB.Positron") %>% addMarkers(coords$lon, coords$lat, popup = paste("<b>Artist: </b>",coords$name,"</br></b>Hotttnesss: </b>",coords$hotttnesss,sep="")
)
}
leaflet(data=coords) %>% addTiles()%>%setView(mean(coords$lon), mean(coords$lat), zoom = 2)%>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(coords$lon, coords$lat, popup = paste("<b>Artist: </b>",coords$name,"</br></b>Hotttnesss: </b>",coords$hotttnesss,sep="")
)
}
leaflet(data=coords) %>% addTiles()%>%setView(mean(coords$lon), mean(coords$lat), zoom = 2)%>%
#    addProviderTiles("CartoDB.Positron") %>%
addMarkers(coords$lon, coords$lat, popup = paste("<b>Artist: </b>",coords$name,"</br></b>Hotttnesss: </b>",coords$hotttnesss,sep="")
)
leaflet() %>% addTiles()%>%setView(mean(coords$lon), mean(coords$lat), zoom = 2)%>%
#    addProviderTiles("CartoDB.Positron") %>%
addMarkers(coords$lon, coords$lat, popup = paste("<h4>Artist: </h4>",coords$name,"</br><h4>Hotttnesss: </h4>",coords$hotttnesss,sep="")
)
leaflet() %>% addTiles()%>%setView(mean(coords$lon), mean(coords$lat), zoom = 2)%>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(coords$lon, coords$lat, popup = paste("<b>Artist: </b>",coords$name,"</br><b>Hotttnesss: </b>",coords$hotttnesss,sep="")
)
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
shiny::runApp('C:/Users/mukul.chaware13/Desktop/N/Music API/Music data visualization')
library(twitteR)
download.file(url = 'http://curl.haxx.se/ca/cacert.pem',
destfile='cacert.pem')
requestURL="https://api.twitter.csom/oauth/request_token"
accessURL="https://api.twitter.com/oauth/access_token"
authURL="https://api.twitter.com/oauth/authorize"
consumerKey="jOP91eLqcrlxprYCMgH9AeWd4"
consumerSecret="DSGBixATCwwVZy7RoUuDjqh7z82vMFfhWlJ4zV5d5sbCbnHlk7"
accessToken="3369300031-RUeCuOUSZoIgCuoxzxOxWXf9ik608RKbnGZCVsL"
accessSecret="acwuhSqWanZlOrNGBNmu1WEKnHS3pRBGN3U4XyaXcvdJZ"
options(httr_oauth_cache=T)
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
?searchTwitteR
ls("package:twitter")
ls("package:twitteR")
?getUser
d=get_twitter_handle(api_key,"adele")
d
d=d$twitter
d
str(d)
f=getUser(d)
f=getUser(user = d)
f=lookupUsers(user = d)
f=lookupUsers(users = d)
?searchTwitteR
d=searchTwitteR("batman")
d
?getUser
d
d=get_twitter_handle(api_key,"adele")
d$twitter
getUser(d$twitter)
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
library(twitteR)
library(ROAuth)
requestURL="https://api.twitter.csom/oauth/request_token"
accessURL="https://api.twitter.com/oauth/access_token"
authURL="https://api.twitter.com/oauth/authorize"
consumerKey="jOP91eLqcrlxprYCMgH9AeWd4"
consumerSecret="DSGBixATCwwVZy7RoUuDjqh7z82vMFfhWlJ4zV5d5sbCbnHlk7"
accessToken="3369300031-RUeCuOUSZoIgCuoxzxOxWXf9ik608RKbnGZCVsL"
accessSecret="acwuhSqWanZlOrNGBNmu1WEKnHS3pRBGN3U4XyaXcvdJZ"
## to make connections
options(httr_oauth_cache=T)
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
print("Authentication done")
getUser(d$twitter)
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
requestURL="https://api.twitter.csom/oauth/request_token"
accessURL="https://api.twitter.com/oauth/access_token"
authURL="https://api.twitter.com/oauth/authorize"
consumerKey="jOP91eLqcrlxprYCMgH9AeWd4"
consumerSecret="DSGBixATCwwVZy7RoUuDjqh7z82vMFfhWlJ4zV5d5sbCbnHlk7"
accessToken="3369300031-RUeCuOUSZoIgCuoxzxOxWXf9ik608RKbnGZCVsL"
accessSecret="acwuhSqWanZlOrNGBNmu1WEKnHS3pRBGN3U4XyaXcvdJZ"
## to make connections
options(httr_oauth_cache=T)
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
print("Authentication done")
ls("package:twitter")
ls("package:twitteR
")
ls("package:twitteR")
?userTimeline
userTimeline(d$twitter)
install_github("geoffjentry/twitteR")
library(devtools)
install_github("geoffjentry/twitteR")
library(twitteR)
requestURL="https://api.twitter.csom/oauth/request_token"
accessURL="https://api.twitter.com/oauth/access_token"
authURL="https://api.twitter.com/oauth/authorize"
consumerKey="jOP91eLqcrlxprYCMgH9AeWd4"
consumerSecret="DSGBixATCwwVZy7RoUuDjqh7z82vMFfhWlJ4zV5d5sbCbnHlk7"
accessToken="3369300031-RUeCuOUSZoIgCuoxzxOxWXf9ik608RKbnGZCVsL"
accessSecret="acwuhSqWanZlOrNGBNmu1WEKnHS3pRBGN3U4XyaXcvdJZ"
## to make connections
options(httr_oauth_cache=T)
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessSecret)
print("Authentication done")
getUser(d$twitter)
userTimeline(d$twitter)
check_twitter_oauth()
